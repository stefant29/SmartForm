package lib;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;

public class SmartForm {
	private static final String fileName = "SmartForm.docx";

	static class TextReplacer {
		private String searchValue;
		private String replacement;

		public TextReplacer(String searchValue, String replacement) {
			this.searchValue = searchValue;
			this.replacement = replacement;
		}

		public XWPFDocument replace(XWPFDocument document) {
			List<XWPFParagraph> paragraphs = document.getParagraphs();
			for (XWPFParagraph xwpfParagraph : paragraphs) {
				replace(xwpfParagraph);
			}
			return document;
		}

		private void replace(XWPFParagraph paragraph) {
			if (hasReplaceableItem(paragraph.getText())) {
				String replacedText = StringUtils.replace(paragraph.getText(), searchValue, replacement);
				removeAllRuns(paragraph);
				insertReplacementRuns(paragraph, replacedText);
			}
		}

		private void insertReplacementRuns(XWPFParagraph paragraph, String replacedText) {
			String[] replacementTextSplitOnCarriageReturn = StringUtils.split(replacedText, "\n");

			for (int j = 0; j < replacementTextSplitOnCarriageReturn.length; j++) {
				String part = replacementTextSplitOnCarriageReturn[j];

				XWPFRun newRun = paragraph.insertNewRun(j);
				newRun.setText(part);

				if (j + 1 < replacementTextSplitOnCarriageReturn.length) {
					newRun.addCarriageReturn();
				}
			}
		}

		private void removeAllRuns(XWPFParagraph paragraph) {
			int size = paragraph.getRuns().size();
			for (int i = 0; i < size; i++) {
				paragraph.removeRun(0);
			}
		}

		private boolean hasReplaceableItem(String runText) {
			return StringUtils.contains(runText, searchValue);
		}
	}

	public static void main(String[] args) throws IOException {
		// Avem mai multe chestii de completat:
		TextReplacer r = new TextReplacer("Data incarcare:", "Data incarcare: 23");
		TextReplacer r1 = new TextReplacer("Adresa incarcare:", "Adresa incarcare: Strada Abatajului, numar 8");
		
		System.out.println("We are starting!");
		XWPFDocument docx = null;
		try {
			// Cream fisierul Word docx:
			docx = new XWPFDocument(new FileInputStream(fileName));
			// Apelam metoda de replace pentru fiecare chestie de modificat:
			// putem face o lista eventual, cumva sa nu mai apelam succesiv
			r.replace(docx);
			r1.replace(docx);
			// Salvam documentul:
			// putem folosi acelasi nume ca la deschidere, adica sa "modificam"
			// fisierul:
			saveWord(fileName, docx);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			docx.close();
		}

		System.out.println("We are done!");
	}

	// Metoda ce salveaza documentul Word:
	private static void saveWord(String filePath, XWPFDocument docx) throws FileNotFoundException, IOException {
		FileOutputStream outContent = null;
		try {
			outContent = new FileOutputStream(filePath);
			docx.write(outContent);
		} finally {
			outContent.close();
		}
	}
}
